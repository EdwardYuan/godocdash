// Code generated by go-bindata.
// sources:
// asset/godoc.png
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetGodocPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xec\x04\x13\xfb\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x20\x00\x00\x00\x20\x08\x06\x00\x00\x00\x73\x7a\x7a\xf4\x00\x00\x00\x04\x73\x42\x49\x54\x08\x08\x08\x08\x7c\x08\x64\x88\x00\x00\x04\xa3\x49\x44\x41\x54\x58\x85\xed\x95\x59\x4c\x54\x57\x18\xc7\x7f\xe7\xde\x99\x61\x06\x2e\x08\x65\x70\xea\x08\x85\x41\x54\xca\xa6\x16\xa2\x52\x65\x92\xaa\x69\xfb\x80\x90\xb6\x10\xb5\x71\x69\xb4\x6d\x8c\x0f\x8d\xe9\x8b\xad\x35\x56\xd3\x25\x31\x4d\x5a\x53\x9b\xa8\xa9\xb1\x52\x4d\x9b\x96\x51\xab\xd8\xba\x45\x9b\x36\x12\xa9\x2b\x91\x06\xb7\xca\x22\x8b\x56\x06\x10\x70\x66\x98\x81\xe1\xf4\x61\x60\xc2\x26\x16\xd2\xa4\x2f\xfc\x5f\xee\x3d\xe7\x7c\xcb\xef\xfb\xce\x3d\xe7\xc2\xff\x2c\xf1\x24\x83\xc2\xc2\x42\xf5\xae\xd7\x6f\x17\x42\x79\x05\x48\x41\x92\x08\x44\xf6\x2e\x47\xf5\x3e\xdb\x01\x3f\xe0\x42\x70\x53\x4a\x2a\xa4\xe0\xd0\x85\x59\x69\xa5\x6c\xd9\xd2\xf3\x44\x80\xd9\xf9\x05\x39\x2a\x6c\x92\x92\xa9\x20\x9c\xc0\x37\x65\x47\x8b\x77\x67\x2f\x7e\x6d\x89\x14\x7c\x0a\x22\x61\x6c\xf5\xc9\x3b\x48\x36\x96\x95\x1c\x2c\x9e\x9b\x57\xf0\x3a\xb0\x16\x64\x2c\x88\x5a\x24\xdb\xca\x4a\x1c\xc7\x45\x76\x6e\xc1\x42\xa9\x70\x12\x50\x07\xa1\xd5\x23\x89\x05\x50\x4d\x61\x98\xd3\x33\xd1\xe2\x12\xd1\x62\x13\x30\x44\x46\xa3\x33\x85\xa2\x1a\x4d\x00\xf8\x3b\x3d\x74\x7b\xdc\xf8\x1e\x36\xf3\xa8\xbe\x86\x47\x75\x55\x38\x2b\x2e\xe3\xf7\xb8\x7a\x43\x89\x3b\x12\x39\x65\x30\x1d\x42\x2c\x13\x73\xf2\x0a\x7f\x13\x48\xfb\x84\xa4\x14\xcc\x19\x59\xb4\x57\xdd\xa2\xa9\xbc\x0c\x80\x90\x28\x33\x09\x8b\x97\x12\x33\x33\x1b\x45\xaf\x1f\x55\xed\x3d\x5d\x3e\x9a\xca\xcb\xa8\x29\xf9\x1e\x6f\x6b\x33\x6a\x88\x09\x6b\xce\x8b\x28\x21\x21\xdc\x3b\x77\x1a\x5f\x5b\x2b\x48\x79\x5d\xcc\xcd\x2f\xa8\x31\x46\x5b\xe2\xb3\x36\x7d\x81\x90\x12\xa1\xd3\xe3\xbc\x76\x11\x67\xf9\x1f\xa4\x2e\x5d\xc3\x3c\xb3\x89\x67\x8d\x02\xa3\x02\xcd\xdd\x70\xc5\x25\xa9\xf4\x0c\x4d\x28\x80\xb4\x50\x48\x32\x0a\xf4\x02\xee\xf9\x24\x97\x5d\xd0\xe1\xf6\x50\x7b\xc2\x81\xd5\xfe\x32\x7a\x2d\x02\xbf\xc7\x8d\xb7\xad\x85\xab\x9f\xbd\x0f\xe0\xd6\x21\xc5\x6d\x93\xd9\x12\x2f\x7d\x5e\xaa\x7f\xfe\x11\x29\xc0\x96\xbb\x8c\xc4\x99\x59\xbc\x6d\x51\x88\xe9\x57\xb8\xd5\x00\xe9\xa1\x82\x4b\x2e\x70\x34\x4b\x64\xef\x7c\x98\x02\xab\x62\x04\xf1\x21\xfd\x88\xc2\x04\x0b\x27\xc0\x01\xa7\x09\x35\x7f\x05\x6d\x55\x37\xa8\x3b\x75\x18\xe3\xc4\x49\x58\x9f\x5f\xd4\x87\x7d\x5b\x8d\x9b\x9a\xd2\xd8\xd9\xea\x5c\x11\x39\x3d\x5d\x98\x33\x66\x13\x33\x63\x0e\x8a\x4e\xc7\x1a\x8b\x82\xd5\x30\x7c\x7b\xad\x06\xe8\xec\x81\xbb\xbe\xc0\x78\x65\x8c\x60\x8a\x71\xa8\x9d\x5e\x40\x9a\x49\x70\xd5\x03\x44\x9a\x89\x4e\xcb\x44\x9b\x9c\x40\xed\x71\x07\xed\xd5\x37\x41\x88\xf5\xca\xf9\x63\x8e\x33\xf4\xf8\x97\x54\xec\xfc\xc4\x55\x75\x78\x3f\xee\x07\x8d\xd8\x8c\x83\xaa\x01\xdc\x6e\x37\x6f\xac\x58\x4e\xea\xf4\x69\x6c\x7c\x6f\x03\xf6\xf0\x40\xdb\xe3\x0c\x30\x6d\x50\xf2\x8a\x8a\x6b\xbc\x60\x9f\xcf\x73\x33\xd2\x39\x55\x72\x84\xf9\xe1\x81\xd3\xde\x5e\x7d\x8b\x6b\x5f\x6e\xa5\xfe\xcc\x51\xaf\x10\xac\x2d\x3b\x52\xfc\x83\x02\x70\xfe\xa8\xa3\xb8\xc7\xdf\x73\xfa\xc1\xe5\x73\x78\x9c\xf7\x89\x1b\x94\x1c\x60\x7f\x51\x11\x27\x8e\xff\x42\x73\xb3\x93\xbd\x7b\xbe\xa6\xbc\xf4\x77\x22\x75\xf0\xcc\x30\xb6\x5b\x37\x6f\xe6\x7a\x65\x25\x8d\x0d\x0d\xbc\xbb\xfe\x1d\xac\x4a\x37\x00\xbe\x8e\x36\x3a\x6a\xff\x02\x38\x79\xfe\x88\x63\x37\x80\xd2\xe7\x24\xa4\x4c\x05\xd0\x26\xdb\x90\x72\x68\x50\x45\x11\x43\xc6\xc3\x98\x05\x62\x09\x31\xe0\xbd\x6f\x1c\x1e\x67\xeb\x9d\x95\xc9\xc1\x38\xfd\xfc\x26\x01\xe8\xb5\xf0\xe0\xde\xf6\xd7\xf2\x95\xab\xc8\xcd\xcb\xc3\x62\xb1\xb0\x76\xdd\x3a\xd2\xb2\x73\x68\xeb\x86\x1a\xef\x30\x1d\xf8\xe8\x63\xd2\x33\x66\x10\x1f\x9f\xc0\xf6\x1d\x5f\x51\xdf\x1d\xb8\x62\xf4\x5a\x44\x1f\x96\xb5\xcf\x56\xd7\xcf\x4f\x03\x50\xf4\x06\x6a\xbd\x50\xed\x05\x5b\xbf\xf6\x9a\x4c\x26\xf6\xec\xdd\x17\x1c\x6f\xd8\x55\xc4\xd9\x9f\x1c\x08\x9d\x1e\xd3\xea\xd5\xbc\xf5\x6a\x6e\x70\x2d\x25\x35\x95\xd3\x67\x7f\x05\x02\x1f\xeb\xe7\xf7\x02\xbd\x52\xf4\xc1\xaf\x5a\x1b\x0e\x60\x80\xbe\x73\x4a\xde\x9c\x28\xb0\x0c\xb9\x7f\x24\x67\x2f\x5e\xe1\xe0\xb6\x0f\x83\x33\xdb\x3f\xa8\x24\x67\x56\x0a\xc9\xb6\xc4\x01\x96\xae\x1e\x38\xd0\x24\x69\xf3\x3f\x2e\xcb\x08\x00\xed\x7e\xd8\x71\x5f\x32\x5b\x83\x64\x93\x20\x54\x01\x67\x37\x34\x1e\xfb\x96\x88\xba\x3f\x59\xbd\x20\x8b\x73\xd7\x6b\x50\x55\x85\x45\x19\x49\x38\x0f\xed\xa4\x24\x79\x3e\x51\xf6\x7c\x0c\x02\x1a\xbb\x24\xe5\x2e\xf0\x8c\xf8\x2b\x1a\x01\x00\xa0\x4b\x42\x69\x07\x94\x76\x04\x5a\xa8\x76\xf9\x78\xa9\xbe\x12\x00\x7b\x8a\x0d\x7b\x8a\x6d\x80\xbd\xfe\xf6\x25\x4a\xd2\xf3\x46\xce\x38\x1a\x80\xc1\xea\x56\x54\xf6\x85\x67\x12\xeb\x6d\x62\x9e\x06\xa1\x21\x06\x84\x10\xb4\xb8\x3a\xb9\xe0\x51\x69\xd0\xac\x58\x46\x95\x7e\x94\x00\x42\x55\x89\x5e\x90\x4f\xeb\xc3\x16\x32\x93\xc2\x88\xd1\x42\x01\xb8\xf1\x77\x0b\xa7\x1a\xba\x30\x3f\x65\x1e\x65\xfa\x81\xc7\xf0\x5f\x49\xd5\x1b\x08\x8b\x79\x9a\xba\x36\x57\x70\xae\xc1\xe5\x45\xb3\x58\x51\xf5\x8f\xb9\xbb\x47\xd0\xa8\x3a\xd0\x5f\xbb\x6a\x1e\xe1\xb9\x5a\x03\x80\x36\x71\x12\x11\x93\xc7\x16\x67\xcc\x00\x51\x09\x49\x44\x25\x24\x8d\xd5\x3d\xa8\x51\x6f\xc1\x7f\xad\x71\x80\x71\x80\x71\x80\x71\x80\x71\x80\x7f\x00\x14\x0c\x8b\x81\xe1\xd7\x9b\x7a\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x4f\xb5\x1c\xf9\xec\x04\x00\x00")

func assetGodocPngBytes() ([]byte, error) {
	return bindataRead(
		_assetGodocPng,
		"asset/godoc.png",
	)
}

func assetGodocPng() (*asset, error) {
	bytes, err := assetGodocPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "asset/godoc.png", size: 1260, mode: os.FileMode(384), modTime: time.Unix(1521967020, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"asset/godoc.png": assetGodocPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"asset": &bintree{nil, map[string]*bintree{
		"godoc.png": &bintree{assetGodocPng, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

